{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ReactGridLayout","WidthProvider","RGL","App","state","layout","i","x","y","w","h","resizeplotly","onLayoutChange","_this","setState","onResize","layouts","react_default","a","createElement","className","class","style","color","type","placeholder","aria-label","rowHeight","cols","this","width","draggableHandle","draggableCancel","key","marginTop","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAOMA,qBAAkBC,wBAAcC,MAGhCC,6MAEJC,MAAQ,CACNC,OAAS,CACP,CAACC,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC9B,CAACJ,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC9B,CAACJ,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC9B,CAACJ,EAAG,IAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAEhCC,cAAc,KAGhBC,eAAiB,SAACP,GAChBQ,EAAKC,SAAS,CAACT,cAGjBU,SAAW,SAACC,GACVH,EAAKC,SAAS,CACZT,OAAQW,6EAKV,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,8BACTJ,EAAAC,EAAAC,cAAA,SAAOE,MAAM,eAAeC,MAAO,CAAEC,MAAO,UAAYN,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,uBAC3DF,EAAAC,EAAAC,cAAA,QAAME,MAAM,eACVJ,EAAAC,EAAAC,cAAA,SAAOE,MAAM,uBAAuBG,KAAK,SAASC,YAAY,YAAYC,aAAW,WACrFT,EAAAC,EAAAC,cAAA,UAAQE,MAAM,qCAAqCG,KAAK,UAAxD,YAIJP,EAAAC,EAAAC,cAACnB,EAAD,CACI2B,UAAY,IACZC,KAAM,EACNb,SAAUc,KAAKd,SACfe,MAAO,GACPzB,OAAQwB,KAAKzB,MAAMC,OACnBO,eAAgBiB,KAAKjB,eACrBmB,gBAAgB,yBAChBC,gBAAgB,iBAEhBf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,IAAK,GACzBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAf,WACUH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAE1BH,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACY,UAAW,SAAxB,aAEFjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,IAAK,GACzBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAf,cACaH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAE7BH,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACY,UAAW,SAAxB,aAEFjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,IAAK,GACzBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAf,mBACkBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAElCH,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACY,UAAW,SAAxB,aAEFjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOa,IAAK,GACzBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAf,oBACmBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAEnCH,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACY,UAAW,SAAxB,sBAjEIC,aA0ElBhC,EAAIiC,aAAe,CACfT,UAAW,IACXC,KAAM,GAGKzB,QC7EKkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fe363e76.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/react-grid-layout/css/styles.css';\nimport '../node_modules/react-resizable/css/styles.css';\n\nconst ReactGridLayout = WidthProvider(RGL);\n\n\nclass App extends Component {\n  \n  state = { \n    layout : [\n      {i: '1', x: 0, y: 0, w: 1, h: 1},        \n      {i: '2', x: 1, y: 0, w: 1, h: 1},\n      {i: '3', x: 0, y: 1, w: 1, h: 1},\n      {i: '4', x: 4, y: 1, w: 1, h: 1}\n    ],\n    resizeplotly: false,\n  };\n\n  onLayoutChange = (layout) => {\n    this.setState({layout});\n  }\n  \n  onResize = (layouts) => {\n    this.setState({\n      layout: layouts,\n    });\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <nav class=\"navbar navbar-dark bg-dark\">\n          <label class=\"navbar-brand\" style={{ color: \"white\" }} ><b><h2>Vidrona</h2></b></label>\n          <form class=\"form-inline\">\n            <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search...\" aria-label=\"Search\" />\n            <button class=\"btn btn-outline-light my-2 my-sm-0\" type=\"submit\">Logout</button>\n          </form>\n        </nav>\n\n        <ReactGridLayout\n            rowHeight= {150}\n            cols={8}\n            onResize={this.onResize}\n            width={20}\n            layout={this.state.layout}\n            onLayoutChange={this.onLayoutChange}\n            draggableHandle=\".MyDragHandleClassName\"\n            draggableCancel=\".MyDragCancel\"\n        >\n            <div className=\"item\" key={1}>\n              <div className='MyDragHandleClassName'> \n                Projects<span className=\"text\"></span>\n              </div>\n              <div style={{marginTop: '80px'}}>Grid - 1</div>\n            </div>\n            <div className=\"item\" key={2}>\n              <div className='MyDragHandleClassName'> \n                Client Info<span className=\"text\"></span>\n              </div>\n              <div style={{marginTop: '80px'}}>Grid - 2</div>\n            </div>\n            <div className=\"item\" key={3}>\n              <div className='MyDragHandleClassName'> \n                Current Projects<span className=\"text\"></span>\n              </div>\n              <div style={{marginTop: '80px'}}>Grid - 3</div>\n            </div>\n            <div className=\"item\" key={4}>\n              <div className='MyDragHandleClassName'> \n                Vegetative Health<span className=\"text\"></span>\n              </div>\n              <div style={{marginTop: '80px'}}>Grid - 4</div>\n            </div>\n        </ReactGridLayout>\n        \n      </div>\n    );\n  }\n}\n\nApp.defaultProps = {\n    rowHeight: 150,\n    cols: 2, \n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}